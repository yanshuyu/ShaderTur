// Transform
float3 UnityObjectToWorldDir( in float3 dir )
float3 UnityObjectToWorldNormal( in float3 norm )
float3 UnityWorldSpaceViewDir( in float3 worldPos )
float3 UnityWorldSpaceLightDir( in float3 worldPos ) 

unity_ObjectToWorld // M
unity_WorldToObject // Inverse_M

unity_WorldToCamera // V
unity_CameraToWorld // Inverse_V

float4 UnityObjectToClipPos(in float3 pos)  // MVP
float4 UnityWorldToClipPos( in float3 pos ) // VP
float4 UnityViewToClipPos( in float3 pos ) // V


// Culling and Depth testing

Cull Back | Front | Off
ZWrite On | Off
ZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always

// Blending
Blend On | Off
Blend SrcFactor DstFactor (One,Zero,SrcColor,DstColor,SrcAlpha,DstAlpha,OneMinusSrcColor,OneMinusSrcAlpha,OneMinusDstColor,OneMinusDstAlpha)
BlendOp Op (Add,Sub,RevSub,Min,Max,LogicalClear,LogicalSet,LogicalCopy...)
BlendOp OpColor, OpAlpha

// Stencil testing
Stencil {
    Ref referenceValue
    ReadMask readMask
    WriteMask writeMask
    Comp comparisonFunction (Greater,GEqual,Less,LEqual,Equal,NotEqual,Always,Never)
    Pass stencilOperation (Keep,Zero,Replace,IncrSat,DecrSat,Invert,IncrWrap,DecrWrap)
    Fail stencilOperation
    ZFail stencilOperation
}



// surface shader application to vertex build-in struct
 struct appdata_base
 {
     float4 vertex   : POSITION;  // The vertex position in model space.
     float3 normal   : NORMAL;    // The vertex normal in model space.
     float4 texcoord : TEXCOORD0; // The first UV coordinate.
 };

 struct appdata_tan
 {
     float4 vertex   : POSITION;  // The vertex position in model space.
     float3 normal   : NORMAL;    // The vertex normal in model space.
     float4 texcoord : TEXCOORD0; // The first UV coordinate.
     float4 tangent  : TANGENT;   // The tangent vector in model space (used for normal mapping).
 };


 struct appdata_full
 {
     float4 vertex    : POSITION;  // The vertex position in model space.
     float3 normal    : NORMAL;    // The vertex normal in model space.
     float4 texcoord  : TEXCOORD0; // The first UV coordinate.
     float4 texcoord1 : TEXCOORD1; // The second UV coordinate.
     float4 tangent   : TANGENT;   // The tangent vector in Model Space (used for normal mapping).
     float4 color     : COLOR;     // Per-vertex color
 };

 // surface shader input struct fileds
float3 viewDir - contains view direction, for computing Parallax effects, rim lighting etc.
float4 with COLOR semantic - contains interpolated per-vertex color.
float4 screenPos - contains screen space position for reflection or screenspace effects. Note that this is not suitable for GrabPass; you need to compute custom UV yourself using ComputeGrabScreenPos function.
float3 worldPos - contains world space position.
float3 worldRefl - contains world reflection vector if surface shader does not write to o.Normal. See Reflect-Diffuse shader for example.
float3 worldNormal - contains world normal vector if surface shader does not write to o.Normal.
float3 worldRefl; INTERNAL_DATA - contains world reflection vector if surface shader writes to o.Normal. To get the reflection vector based on per-pixel normal map
, use WorldReflectionVector (IN, o.Normal). See Reflect-Bumped shader for example.
float3 worldNormal; INTERNAL_DATA - contains world normal vector if surface shader writes to o.Normal. To get the normal vector based on per-pixel normal map, use WorldNormalVector (IN, o.Normal).